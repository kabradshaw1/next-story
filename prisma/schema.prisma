generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Character {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cannon    Boolean  @default(false)
  user      String

  scenes Scene[]
  roles  CharacterRoles[]

  fileNames FileName[]
}

model Scene {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  text      String?
  timeline  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cannon    Boolean  @default(false)
  user      String

  characters     Character[]
  locations      Location[]
  conflicts      Conflict[]
  populations    Population[]
  organizations  Organization[]
  characterRoles CharacterRoles[]

  fileNames FileName[]
}

model Organization {
  id             Int      @id @default(autoincrement())
  title          String   @unique
  text           String?
  headquartersId Int?     @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  cannon         Boolean  @default(false)
  user           String

  roles Role[]

  conflicts    Conflict[]
  scenes       Scene[]
  headquarters Location?  @relation("Headquarters", fields: [headquartersId], references: [id])
  locations    Location[]

  fileNames FileName[]
}

model Role {
  id             Int      @id @default(autoincrement())
  title          String
  characterId    Int?
  organizationId Int
  parentId       Int? // For hierarchical relationship
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  cannon         Boolean  @default(false)
  user           String

  organization Organization @relation(fields: [organizationId], references: [id])
  superior     Role?        @relation("RoleHierarchy", fields: [parentId], references: [id])
  subordinates Role[]       @relation("RoleHierarchy")

  characters CharacterRoles[]
}

model CharacterRoles {
  id          Int     @id @default(autoincrement())
  characterId Int
  roleId      Int
  cannon      Boolean @default(false)
  user        String

  character Character @relation(fields: [characterId], references: [id])
  role      Role      @relation(fields: [roleId], references: [id])
  scenes    Scene[]
}

model Location {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cannon    Boolean  @default(false)
  user      String

  scenes Scene[]

  shipId Int?
  ship   Ship? @relation(fields: [shipId], references: [id])

  organizations  Organization[]
  headquartersOf Organization?  @relation("Headquarters")

  fileNames FileName[]
}

model Population {
  id         Int     @id @default(autoincrement())
  population Int
  shipId     Int     @unique
  ship       Ship    @relation(fields: [shipId], references: [id])
  sceneId    Int     @unique
  scene      Scene   @relation(fields: [sceneId], references: [id])
  cannon     Boolean @default(false)
  user       String
}

model Ship {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cannon    Boolean  @default(false)
  user      String

  populations Population[]
  locations   Location[]

  fileNames FileName[]
}

model Conflict {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      String

  scenes        Scene[]
  organizations Organization[]

  fileNames FileName[]
}

model FileName {
  id             Int      @id @default(autoincrement())
  fileName       String   @unique
  characterId    Int?
  sceneId        Int?
  locationId     Int?
  shipId         Int?
  conflictId     Int?
  organizationId Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  discriminator  String
  user           String

  // Relations
  character    Character?    @relation(fields: [characterId], references: [id])
  scene        Scene?        @relation(fields: [sceneId], references: [id])
  location     Location?     @relation(fields: [locationId], references: [id])
  ship         Ship?         @relation(fields: [shipId], references: [id])
  conflict     Conflict?     @relation(fields: [conflictId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])
}
