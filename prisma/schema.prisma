// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Character {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scene Scene[]

  fileNames FileName[]
  role      Role[]
}

model Scene {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  text      String?
  timeline  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  characters   Character[]
  location     Location[]
  conflict     Conflict[]
  population   Population[]
  organization Organization[]

  fileNames FileName[]
  startRole Role[]     @relation("StartScene")
  endRole   Role[]     @relation("EndScene")
}

model Population {
  id         Int   @id @default(autoincrement())
  population Int
  shipId     Int   @unique
  ship       Ship  @relation(fields: [shipId], references: [id])
  sceneId    Int   @unique
  scene      Scene @relation(fields: [sceneId], references: [id])
}

model Organization {
  id         Int      @id @default(autoincrement())
  title      String   @unique
  text       String?
  locationId Int?     @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  roles Role[]

  conflicts    Conflict[]
  scene        Scene[]
  headquarters Location?  @relation("Headquarters", fields: [locationId], references: [id])
  locations    Location[]

  fileNames FileName[]
}

model Role {
  id             Int      @id @default(autoincrement())
  title          String
  characterId    Int
  organizationId Int
  parentId       Int? // For hierarchical relationship
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  sceneStartId Int?         @unique
  startScene   Scene?       @relation("StartScene", fields: [sceneStartId], references: [id])
  sceneEndId   Int?         @unique
  endScene     Scene?       @relation("EndScene", fields: [sceneEndId], references: [id])
  character    Character    @relation(fields: [characterId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
  superior     Role?        @relation("RoleHierarchy", fields: [parentId], references: [id])
  subordinates Role[]       @relation("RoleHierarchy")
}

model Location {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scene Scene[]

  shipId Int?
  ship   Ship? @relation(fields: [shipId], references: [id])

  organizations  Organization[]
  headquartersOf Organization?  @relation("Headquarters")

  fileNames FileName[]
}

model Ship {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  population Population[]
  location   Location[]

  fileNames FileName[]
}

model Conflict {
  id        Int      @id @default(autoincrement())
  title     String   @unique
  text      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scene        Scene[]
  organization Organization[]

  fileNames FileName[]
}

model FileName {
  id             Int      @id @default(autoincrement())
  fileName       String   @unique
  characterId    Int?
  sceneId        Int?
  locationId     Int?
  shipId         Int?
  conflictId     Int?
  organizationId Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  discriminator  String

  // Relations
  character    Character?    @relation(fields: [characterId], references: [id])
  scene        Scene?        @relation(fields: [sceneId], references: [id])
  location     Location?     @relation(fields: [locationId], references: [id])
  ship         Ship?         @relation(fields: [shipId], references: [id])
  conflict     Conflict?     @relation(fields: [conflictId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])
}
